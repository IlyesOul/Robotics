#include <kipr/botball.h>
#define LEFT_MOTOR 0
#define RIGHT_MOTOR 1
#define ARM 1
#define CLAW 0
#define LEFT_IR 0
#define RIGHT_IR 1
#define BLUE_CHANNEL 0
#define YELLOW_CHANNEL 1
#define SMALL_IR 2
#define BUTTON 3
#define LIGHT 0


void alignWithTape();
void turn_90_CW();
void turn_90_CCW();
void move_along_line_to_cube();
void move_short();
void move_to_yellow_cubes();
void open_claw();
void close_claw();
void setClawFromTo();
void moveBackFromCube();
void move_along_line_to_end_zone();
void check_for_tape();
void moveBackFromEndZone();
void turn180();
void turn45CCW();
int check_yellow_cube();
void turn45CW();
void move_to_yellow_zone();
void move();
void turn();
void move_back_from_yellow_zone();
void move_back_home();

typedef enum {false, true} bool;
typedef enum {CLAW_OPEN = 400, CLAW_CLOSE = 1050} ClawPosition;
typedef enum {LEFT_IR_LIMIT = 3500, RIGHT_IR_LIMIT = 3500} IR_Sensors_Maximum_Values;
typedef enum {LEFT_WHITE = 2000, RIGHT_WHITE = 1500, RIGHT_WHITE_DUCT = 2000} WhiteReading;
typedef enum {LEFT_BLACK = 3500, RIGHT_BLACK = 3500} BlackReading; // black > BlackReading

int main()
{   
    //move_back_from_yellow_zone();
    //msleep(500);
    //turn(-65);
    //msleep(500);
    //move_back_home();
    
    //wait_for_light(LIGHT);
    //msleep(2000);
    //shut_down_in(120);
    
    printf("Open claw at begining\n");
    open_claw(); 

    printf("Move Out Of Staring Box\n");
    check_for_tape();

    printf("Align With Black Tape\n");
    alignWithTape();

    printf("turning 90 CCW\n"); //don't try both in a row
    turn_90_CCW();

    motor(LEFT_MOTOR, 70);
    motor(RIGHT_MOTOR, 70);
    msleep(1300);

    printf("move along tapoe to end zone\n");
    move_along_line_to_end_zone();

    msleep(1000);

    printf("move back from end zone\n");
    moveBackFromEndZone();

    turn180();

    printf("lets move along the line to cube\n");
    move_along_line_to_cube();

    printf("move a little\n");
    move_short();

    //wait for 1 sec
    msleep(200);

    printf("turning 90 CCW\n"); //don't try both in a row
    turn_90_CCW();

    printf("move to yellow cubes\n");
    move_to_yellow_cubes();

    // close_claw();
    printf("CLose claw\n");
    setClawFromTo(CLAW_OPEN,CLAW_CLOSE);

    printf("move back from cubes a litle bit\n");
    //moveBackFromCube();
    moveBackFromCube();
    
    printf("move to the zone where the small yellow cube is");
    move_to_yellow_zone();
    
    printf("move back from the yellow zone");
    move_back_from_yellow_zone();
    msleep(500);
    
    printf("turn 90 CW\n");
    turn(-67);
    msleep(500);
    
    printf("move back home\n");
    move_back_home();
    msleep(500);
    
    printf("turn 90 CW\n");
    turn_90_CW();
    
    printf("move back\n");
    move(-100, -100, 1500);
    
    /*
    */
    return 0;
}

void move(int L_speed, int R_speed, int time) {
    motor(LEFT_MOTOR, L_speed);
    motor(RIGHT_MOTOR, R_speed);
    msleep(time);
    ao();
}

// angle > 0: CCW
// angle < 0: CW
void turn(int angle) {
    if (angle > 0) {
        motor(RIGHT_MOTOR, 100);
    } else if (angle < 0) {
        motor(LEFT_MOTOR, 100);
        angle = -angle;
    }
    
    msleep(angle * 12);
    ao();
}

void turn_90_CW() {
    motor(LEFT_MOTOR, 55); //50
    //motor(RIGHT_MOTOR, -50);
    msleep(1550); //1360 1400
    ao();
}

void turn_90_CCW(){
    //motor(LEFT_MOTOR, -50);
    motor(RIGHT_MOTOR, 70);
    msleep(1650); //1360
    ao();
}

void turn180(){
    motor(LEFT_MOTOR, 53);
    motor(RIGHT_MOTOR, -50);
    msleep(1950);

    ao();  
}

void turn45CCW(){
    //motor(LEFT_MOTOR, -50);
    motor(RIGHT_MOTOR, 70);
    msleep(805); //1360
    ao();
}

void open_claw() {
    enable_servo(CLAW);
    set_servo_position(CLAW, CLAW_OPEN);
    msleep(100);
}

void close_claw() {
    enable_servo(CLAW);
    set_servo_position(CLAW, CLAW_CLOSE);
    msleep(1000);   
}

void check_for_tape(){
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);

    while ((left < LEFT_BLACK) && (right < RIGHT_BLACK)) {
        // printf("%d %d\n", left, right);
        motor(LEFT_MOTOR, 60);
        motor(RIGHT_MOTOR, 60);

        left = analog(LEFT_MOTOR);
        right = analog(RIGHT_MOTOR);
        msleep(1);
    }

    motor(LEFT_MOTOR, 42);
    motor(RIGHT_MOTOR, 40);
    msleep(1400);

    ao();
}

void alignWithTape(){
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);
    int i = 0;
    
    while((!(left > LEFT_IR_LIMIT) || !(right > RIGHT_IR_LIMIT)) && i < 1000) {
        if(left > 3500) {
            motor(LEFT_MOTOR, -10);//-30
            motor(RIGHT_MOTOR, 28); //30
        } else if(right > 3500) {
            motor(RIGHT_MOTOR, -10);//-30
            motor(LEFT_MOTOR, 28); //30
        } else {
            motor(LEFT_MOTOR, 28); //30
            motor(RIGHT_MOTOR, 28); //30
        }

        i++;
       	left = analog(LEFT_IR);
    	right = analog(RIGHT_IR);
        msleep(2);
    }
    ao();
}

void move_along_line_to_end_zone(){
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);
    int small = analog(SMALL_IR);

    // left white = 2000
    // right white = 1500

    while (small < 3850) { // 250 250
        if (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, 98);
            motor(RIGHT_MOTOR, 100);
        } else if (left > LEFT_BLACK) {
            motor(LEFT_MOTOR, 90);
            motor(RIGHT_MOTOR, 100); //40
            //printf("yup left sees black\n");
        } else if (right > RIGHT_BLACK) { // right > RIGHT_WHITE
            motor(LEFT_MOTOR, 100); //35
            motor(RIGHT_MOTOR, 90);
            //printf("yup right sees black\n");
        }

        msleep(1);
        left = analog(LEFT_IR);
        right = analog(RIGHT_IR);
        small = analog(SMALL_IR);
    }
    
    left = analog(LEFT_IR);
    right = analog(RIGHT_IR);

    int i = 0;
    while (small > 3850 && i < 1000) { // i < 900
        if (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, 62);
            motor(RIGHT_MOTOR, 60); // 30
            //printf("straight\n");
        } else if (left > LEFT_BLACK) {
            motor(LEFT_MOTOR, 40);
            motor(RIGHT_MOTOR, 50);
            //printf("yup left sees black\n");
        } else if (right > RIGHT_BLACK) { // right > RIGHT_WHITE
            motor(LEFT_MOTOR,50);
            motor(RIGHT_MOTOR, 40);
            //printf("yup right sees black\n");
        }

        msleep(1);
        i++;
        left = analog(LEFT_IR);
        right = analog(RIGHT_IR);
        small = analog(SMALL_IR);
    }

    ao();
}

void moveBackFromEndZone(){
    int i = 0;
    int left = analog(RIGHT_IR);//LEFT_IR
    int right = analog(LEFT_IR);

    while (i < 550) { // 750
        if (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, -55);
            motor(RIGHT_MOTOR, -55); // 30
        } else if (left > LEFT_BLACK) {
            motor(LEFT_MOTOR, -50); //30
            motor(RIGHT_MOTOR, -55); //40
            //printf("yup left sees5black\n");
        } else if (right > RIGHT_BLACK) { // right > RIGHT_WHITE
            motor(LEFT_MOTOR, -58); //35
            motor(RIGHT_MOTOR, -50); //30
            //printf("yup right sees black\n");
        }

        i++;
        msleep(1);
        left = analog(LEFT_IR);
        right = analog(RIGHT_IR);
    }
    ao();
}

void move_along_line_to_cube() {
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);
    int small = analog(SMALL_IR);

    // left white = 2000
    // right white = 1500

    while (small < 3850) { // 250 250
        if (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, 100);
            motor(RIGHT_MOTOR, 97);
        } else if (left > LEFT_BLACK) {
            motor(LEFT_MOTOR, 80);
            motor(RIGHT_MOTOR, 100); //40
            //printf("yup left sees black\n");
        } else if (right > RIGHT_BLACK) { // right > RIGHT_WHITE
            motor(LEFT_MOTOR, 100); //35
            motor(RIGHT_MOTOR, 80);
            //printf("yup right sees black\n");
        }

        msleep(1);
        left = analog(LEFT_IR);
        right = analog(RIGHT_IR);
        small = analog(SMALL_IR);
        //i++;
    }
    ao();
}

// used after move_along_line_to_cube
void move_short() {
    motor(LEFT_MOTOR, 45);
    motor(RIGHT_MOTOR, 45);
    msleep(350);
    ao();
}

void move_to_yellow_cubes() {
    int i = 0;
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);

    while (i < 450) { // 750 -- 600 -- 580
        if (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, 50);
            motor(RIGHT_MOTOR, 51); // 30
            //printf("straight\n");
        } else if (left > LEFT_BLACK) {
            motor(LEFT_MOTOR, 50);
            motor(RIGHT_MOTOR, 57);
            //printf("left sees black\n");
        } else if (right > RIGHT_BLACK) { // right > RIGHT_WHITE
            motor(LEFT_MOTOR, 55);
            motor(RIGHT_MOTOR, 50);
            //printf("right sees black\n");
        }

        i++;
        msleep(1);
        left = analog(LEFT_IR);
        right = analog(RIGHT_IR);
    }

    ao();
}

void setClawFromTo(ClawPosition startPos, ClawPosition endPos) {
    int increment = (startPos > endPos) ? -1 : 1;
    int curPos = startPos;

    while (curPos != endPos) {
        curPos += increment;
        set_servo_position(CLAW, curPos);
        msleep(1);
    }
}

void moveBackFromCube(){
    int i = 0;
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);

    while (i < 500) { // 750
        if (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, -60);
            motor(RIGHT_MOTOR, -62); // 30
        } else if (left > LEFT_BLACK) {
            motor(LEFT_MOTOR, -70); //30
            motor(RIGHT_MOTOR, -60); //40
            //printf("yup left sees black\n");
        } else if (right > RIGHT_BLACK) { // right > RIGHT_WHITE
            motor(LEFT_MOTOR, -60); //35
            motor(RIGHT_MOTOR, -70); //30
            //printf("yup right sees black\n");
        }

        i++;
        msleep(1);
        left = analog(LEFT_IR);
        right = analog(RIGHT_IR);
    }
    
    ao();
}

int check_yellow_cube() {
    camera_open(HIGH_RES);
    msleep(1000);
    camera_update();
    
    int i = 0;
    int x;
	while (i < 50) { //500 -- 100
    	x = get_object_center(YELLOW_CHANNEL, 0).x;
        //printf("\n%d", x);
        
        msleep(1);
        camera_update();
        i++;
    }
    
    //camera_close();
    //ao();
    return x;
}
void turn45CW(){
    motor(LEFT_MOTOR, 70);
   // motor(RIGHT_MOTOR, 70);
    msleep(805); //1360
    ao();
}

void move_to_yellow_zone() {
    camera_open(HIGH_RES);
    msleep(1000);
    camera_update();
    
    int x = check_yellow_cube();
    printf("%d\n", x);
    
    if (x == -1) { // left/right
        //camera_update();
        //turn(-40);
        turn45CW();
        
        // if found, go there and drop yellow cubes
        x = check_yellow_cube();
        if (x == -1) { // left
        	printf("b\n");
            turn_90_CCW();
            //move(-30, -30, 1000);
            
            int i = 0;
            while (i < 80) {
                //printf("%d\n", x);

                if (x < 120) {
                    motor(LEFT_MOTOR, -60);
                    motor(RIGHT_MOTOR, -50);
                } else if (x > 120) {
                    motor(LEFT_MOTOR, -50);
                    motor(RIGHT_MOTOR, -60);
                } else {
                    motor(LEFT_MOTOR, -50);
                    motor(RIGHT_MOTOR, -50);
                }

                msleep(1);
                camera_update();
                i++;
            	x = get_object_center(YELLOW_CHANNEL, 0).x;
            }
            
            msleep(500);
            turn(95);
            move(50, 50, 200);
            open_claw();
            msleep(500);
        } else { // right
        	printf("c\n");
            
            int i = 0;
            while (i < 70) {
                if (x < 5) {
                    motor(LEFT_MOTOR, -60);
                    motor(RIGHT_MOTOR, -50);
                } else if (x > 5) {
                 	motor(LEFT_MOTOR, -50);
                    motor(RIGHT_MOTOR, -60);
                } else {
                    motor(LEFT_MOTOR, -50);
                    motor(RIGHT_MOTOR, -55);
                }

                msleep(1);
                camera_update();
                i++;
            	x = get_object_center(YELLOW_CHANNEL, 0).x;
            }
            
            msleep(500);
            turn(-100);
            move(50, 50, 500);
            
            open_claw();
            msleep(500);
        }
    } else { // middle
        printf("a\n");
        printf("1st: %d\n", x);
        
        int i = 0;
        while (i < 25) {
            //printf("%d\n", x);
            
            if (x < 40) {
                motor(LEFT_MOTOR, -70);
                motor(RIGHT_MOTOR, -50);
            } else if (x > 40) {
                motor(LEFT_MOTOR, -50);
                motor(RIGHT_MOTOR, -70);
            } else {
                motor(LEFT_MOTOR, -50);
                motor(RIGHT_MOTOR, -50);
            }
            
            msleep(1);
            camera_update();
            i++;
            x = get_object_center(YELLOW_CHANNEL, 0).x;
        }
        
        msleep(200);
        //turn180();
        turn(-120);
        
        int left = analog(LEFT_IR), right = analog(RIGHT_IR);
        while (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, 50);
            motor(RIGHT_MOTOR, 50);
            msleep(1);
            left = analog(LEFT_IR);
            right = analog(RIGHT_IR);
        }
        
        // drop the yellow cubes and push them into the zone
        open_claw();
        msleep(500);
    }
    
    ao();
}

void move_back_from_yellow_zone() {
    move(-100, -100, 1000);
    
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);
    int i = 0;
    
    while((!(left > LEFT_IR_LIMIT) || !(right > RIGHT_IR_LIMIT))) {
        if(left > 3500) {
            motor(LEFT_MOTOR, 10);//-30
            motor(RIGHT_MOTOR, -28); //30
        } else if(right > 3500) {
            motor(RIGHT_MOTOR, 10);//-30
            motor(LEFT_MOTOR, -28); //30
        } else {
            motor(LEFT_MOTOR, -100); //30
            motor(RIGHT_MOTOR, -100); //30
        }

        i++;
       	left = analog(LEFT_IR);
    	right = analog(RIGHT_IR);
        msleep(2);
    }
    ao();
}

void move_back_home() {
    //int left = analog(LEFT_IR);
    //int right = analog(RIGHT_IR);
    int small = analog(SMALL_IR);
    
    while (small < 3850) {
        motor(LEFT_MOTOR, -100);
        motor(RIGHT_MOTOR, -96);
        
        msleep(1);
        //left = analog(LEFT_IR);
        //right = analog(RIGHT_IR);
        small = analog(SMALL_IR);
    }
    
    ao();
}