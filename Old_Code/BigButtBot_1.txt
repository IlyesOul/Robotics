#include <kipr/botball.h>

#define LEFT_IR 1
#define RIGHT_IR 0
#define LEFT_BUTTON 9
#define RIGHT_BUTTON 0
#define ARM 2
#define CLAW 1
#define ELEVATOR 0
#define BLUE_CHANNEL 0
#define YELLOW_CHANNEL 1

int get_lbump();
int get_rbump();
void back_up_against_pvc();
void back_up();
void set_wheel_velocities();
void turn_90_CW();
void turn_90_CCW();
void set_servo_from_to();
void restart();
void restartArmAndClaw();
void lowerArm();
void moveOutOfStartingBox();
void turnToLignWithTape();
void bringArmBackUp();
void movUntilRSensorSeesBalck();
void turn_45_CW();
void moveOutABit();
typedef enum {ARM_DOWN = 1146, ARM_CLOSE = 5, ARM_MAX = 2047} ArmPosition;
typedef enum {CLAW_OPEN = 966, CLAW_GRAB = 357, CLAW_CLOSED = 0} ClawPosition;
typedef enum {ELEVATOR_DOWN = 1720, ELEVATOR_MAX = 0} ElevatorPosition;


int main()
{
    // restart(); 
    //restartArmAndClaw();
    // lowerArm();

    printf("Connecting to Create\n");
    create_connect();

    //  printf("lower Arm at start\n");
    // lowerArm();
    printf("move out of start box until Right sensor sees black");
    movUntilRSensorSeesBalck();

    printf("turn 45 CW");
    turn_45_CW();

    printf("move out a bit");
    moveOutABit();
    printf("turn 90 CW \n");
    turn_90_CCW();

    printf("align with tape\n");
    alignWithTape();

    /*
    printf("turn 90 CW \n");
    turn_90_CW();
    printf("move along tape\n");
    moveAlongtape();//until right Sensor sees black
    printf("move back a little\n");
    moveBackShort();//forward
    printf("turn 90 CW\n");
    turn_90_CW();
    printf("move until front sensors sees black\n");
    moveUntilFrontSensorSeesblack();
    printf("tuen 90 CCW\n");
    turn_90_CCW();
    MoveBackALitleBit();//enough to give bot space
*/


    return 0;
}
void set_wheel_velocities(int leftVelocity, int rightVelocity) {
    create_drive_direct(-rightVelocity, -leftVelocity);
}
int get_lbump() {
    return get_create_rbump();
}

int get_rbump() {
    return get_create_lbump();
}
void back_up_against_pvc() {
    while (get_lbump() == 0 && get_rbump() == 0) {
        set_wheel_velocities(-64, -50 + 1);
    }

    create_stop();
}
void set_servo_from_to(int port, int startPos, int endPos) {
    int increment = (startPos > endPos) ? -2 : 2;
    int curPos = startPos;

    while (curPos != endPos) {
        curPos += increment;
        set_servo_position(port, curPos);
        msleep(2);
    }
}
void turn_90_CW() {
    create_spin_CW(150);
    msleep(5220.0 /4);
    create_stop();
}

void turn_90_CCW()
{
    create_spin_CCW(150);
    msleep(5220.0 /4);
    create_stop();
}
void restart(){
    enable_servo(CLAW);
    set_servo_position(CLAW, CLAW_CLOSED);
    msleep(1000);
    enable_servo(ARM);
    set_servo_position(ARM, ARM_CLOSE);
    msleep(1000);
    enable_servo(ELEVATOR);
    set_servo_position(ELEVATOR, ELEVATOR_DOWN);
    msleep(5000);
}
void restartArmAndClaw(){
    //   enable_servo(CLAW);
    //set_servo_position(CLAW, CLAW_CLOSED);
    // msleep(1000);
    enable_servo(ARM);
    set_servo_position(ARM, 280);
    msleep(1000);
}
void turnToLignWithTape(){
    create_spin_CCW(160);
    msleep(5220.0 /4);
    create_stop();
}
void lowerArm(){
    enable_servo(ARM);
    set_servo_position(ARM, ARM_DOWN);
    msleep(1000);
    create_stop();

}
void moveOutOfStartingBox(){
    set_wheel_velocities(-200,-200);
    msleep(1000);
}
void bringArmBackUp(){
    set_servo_position(ARM, ARM_CLOSE);
    msleep(1000);
    create_stop();
}

void movUntilRSensorSeesBalck(){
    int i=0;
    int left=get_create_lcliff_amt();
    int right;
    while(left>2000){

        left= get_create_lcliff_amt();
        right= get_create_rcliff_amt();
        set_wheel_velocities(-50,-50);

        // printf("left = %d \n", left);
        // printf("right = %d \n", right);
        msleep(10);
        i++;
    }
    set_wheel_velocities(-50,-50);
    msleep(1000);

}
void turn_45_CW(){
    create_spin_CW(75);
    msleep(5220.0 /4);
    create_stop();
}
void moveOutABit(){
    set_wheel_velocities(-100,-100);
    msleep(2000);
}
void alignWithTape(){
    int left=get_create_lcliff_amt();
    int right=get_create_rcliff_amt();

    while(!(left>2000) || !(right>2000)){
        if(left>2000){
            set_wheel_velocities(-10,50);
        }
        else if(right>2000){
            set_wheel_velocities(50,-10);
        }
        else{
            set_wheel_velocities(-50,-50);
        }
            msleep(10);
        
            left= get_create_lcliff_amt();
            right= get_create_rcliff_amt();
        }
        create_stop();

    }
