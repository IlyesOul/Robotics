#include <kipr/botball.h>
#define LEFT_MOTOR 0
#define RIGHT_MOTOR 1
#define ARM 1
#define CLAW 0
#define LEFT_IR 0
#define RIGHT_IR 1
#define BLUE_CHANNEL 0
#define YELLOW_CHANNEL 1
#define SMALL_IR 2



void moveOutOfStartBox();
void alignWithTape();
void turn_90_CW();
void turn_90_CCW();
void move_along_line();
void move_short();
void move_to_yellow_cubes();
void open_claw();
void close_claw();
void setClawFromTo();
void moveBackFromCube();


typedef enum {false, true} bool;
typedef enum {CLAW_OPEN = 530, CLAW_CLOSE = 1200} ClawPosition;
typedef enum {LEFT_IR_LIMIT = 3500, RIGHT_IR_LIMIT = 3500} IR_Sensors_Maximum_Values;
typedef enum {LEFT_WHITE = 2000, RIGHT_WHITE = 1500, RIGHT_WHITE_DUCT = 2000} WhiteReading;
typedef enum {LEFT_BLACK = 3800, RIGHT_BLACK = 3800} BlackReading;

int main()
{   
    open_claw(); 

    printf("Move Out Of Staring Box\n");
    moveOutOfStartBox();
    printf("Align With Black Tape\n");
    alignWithTape();



    printf("turning 90 CW\n");
    turn_90_CW();

    printf("lets move along the line\n");
    move_along_line();

    printf("move a little\n");
    move_short();

    //wait for 1 sec
    msleep(1000);

    printf("turning 90 CCW\n"); //don't try both in a row
    turn_90_CCW();

    printf("move to yellow cubes\n");
    move_to_yellow_cubes();


    // close_claw();
    setClawFromTo(CLAW_OPEN,CLAW_CLOSE);
    return 0;
}

void open_claw() {
    enable_servo(CLAW);
    set_servo_position(CLAW, CLAW_OPEN);
    msleep(100);
}

void close_claw() {
    enable_servo(CLAW);
    set_servo_position(CLAW, CLAW_CLOSE);
    msleep(1000);   
}

void moveOutOfStartBox(){
    motor(LEFT_MOTOR, 50);
    motor(RIGHT_MOTOR, 50);
    msleep(2100);
    ao();
}

void alignWithTape(){
    while( !(analog(LEFT_IR) > LEFT_IR_LIMIT) || !(analog(RIGHT_IR) > RIGHT_IR_LIMIT) ) {
        if(analog(LEFT_IR) > 3500) {
            motor(LEFT_MOTOR, -10);//-30
            motor(RIGHT_MOTOR, 28); //30

        } else if(analog(RIGHT_IR) > 3500) {
            motor(RIGHT_MOTOR, -10);//-30
            motor(LEFT_MOTOR, 28); //30
        } else {
            motor(LEFT_MOTOR, 28); //30
            motor(RIGHT_MOTOR, 28); //30
        }

        msleep(2);
        //ao();

    }
    ao();
}

void turn_90_CW() {
    motor(LEFT_MOTOR, 55); //50
    //motor(RIGHT_MOTOR, -50);
    msleep(1400); //1360
    ao();
}

void turn_90_CCW(){
    //motor(LEFT_MOTOR, -50);
    motor(RIGHT_MOTOR, 50);
    msleep(1360);
    ao();
}

void move_along_line() {
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);
    int small = analog(SMALL_IR);

    // left white = 2000
    // right white = 1500

    while (small < 3850) { // 250 250
        if (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, 32);
            motor(RIGHT_MOTOR, 30);
        } else if (left > LEFT_BLACK) {
            motor(LEFT_MOTOR, 30);
            motor(RIGHT_MOTOR, 40);
            printf("yup left sees black\n");
        } else if (right > RIGHT_BLACK) { // right > RIGHT_WHITE
            motor(LEFT_MOTOR, 35);
            motor(RIGHT_MOTOR, 30);
            printf("yup right sees black\n");
        }

        msleep(1);
        left = analog(LEFT_IR);
        right = analog(RIGHT_IR);
        small = analog(SMALL_IR);
        //i++;
    }
    ao();
}

// used after move_along_line
void move_short() {
    motor(LEFT_MOTOR, 45);
    motor(RIGHT_MOTOR, 45);
    msleep(400);
    ao();
}

void move_to_yellow_cubes() {
    int i = 0;
    int left = analog(LEFT_IR);
    int right = analog(RIGHT_IR);

    while (i < 750) {
        if (left < LEFT_BLACK && right < RIGHT_BLACK) {
            motor(LEFT_MOTOR, 32);
            motor(RIGHT_MOTOR, 30);
        } else if (left > LEFT_BLACK) {
            motor(LEFT_MOTOR, 30);
            motor(RIGHT_MOTOR, 40);
            printf("yup left sees black\n");
        } else if (right > RIGHT_BLACK) { // right > RIGHT_WHITE
            motor(LEFT_MOTOR, 35);
            motor(RIGHT_MOTOR, 30);
            printf("yup right sees black\n");
        }

        i++;
        msleep(1);
        left = analog(LEFT_IR);
        right = analog(RIGHT_IR);
    }

    ao();
}
void setClawFromTo(ClawPosition startPos, ClawPosition endPos) {
    int increment = (startPos > endPos) ? -1 : 1;
    int curPos = startPos;

    while (curPos != endPos) {
        curPos += increment;
        set_servo_position(CLAW, curPos);
        msleep(1);
    }
}

void movBackFromCube(){
    motor(LEFT_MOTOR, -32);
    motor(RIGHT_MOTOR, -30);
    sleep(1000);
}
